* ebloc-broker

*eBlocBroker is a smart contract that applies blockchain technology to provide a market for
computational and data resources to research communities.*

# For more info see: ...

# ** Website: [[http://ebloc.cmpe.boun.edu.tr]] # http://ebloc.org
# - [[http://ebloc.cmpe.boun.edu.tr:3003/index.html][Documentation]]

** Prerequisites

- [[https://github.com/SchedMD/slurm][Slurm]],
  [[https://ipfs.io][IPFS]],
  [[https://github.com/prasmussen/gdrive][prasmussen/gdrive]],
  [[https://github.com/owncloud/pyocclient][owncloud/pyocclient]],
  [[https://github.com/eth-brownie/brownie][eth-brownie]],
  [[https://github.com/trufflesuite/ganache][ganache-cli]]
# [[https://geth.ethereum.org/docs/getting-started][Geth]]

** Using Docker

You can use a sandbox container provided in the [[./docker-compose.yml]] file for testing inside a Docker
environment.

This container provides everything you need to test using a ~Python 3.7~ interpreter. Start the test environment:

#+begin_src bash
docker-compose up -d
#+end_src

To enter the shell of the running container in the interactive mode, run:

#+begin_src bash
docker exec --detach-keys="ctrl-e,e" -it ebloc-broker_slurm_1 /bin/bash
#+end_src

To stop the container, run:

#+begin_src bash
docker-compose down
#+end_src

** Cloud Storages

*** EUDAT

**** Create B2ACCESS user account and login into B2DROP:

First, from [[https://b2access.eudat.eu/home/][B2ACCESS home page]]

~No account SignUp~ => ~Create B2ACCESS user account (username) only~

- [[https://b2drop.eudat.eu/][B2DROP login site]]

**** Create app password

=Settings= => ~Security~ => ~Create new app password~ and save it.

** How to install required packages

We have a helper script, which you can use to install all required external dependencies:

#+begin_src bash
source ./scripts/setup.sh
#+end_src

Next, type ~eblocbroker --help~ for basic usage information.

** Requester

*** Submit Job

In order to submit your job each user should already registered into eBlocBroker using ~eblocbroker register_provider ~/.ebloc-broker/cfg.yaml~
# You can use [[./broker/eblocbroker_scripts/register_requester.py]] to register.
# Please update following arguments inside ~register.yaml~.
After registration is done, each user should authenticate their ORCID iD using the following [[http://eblocbroker.duckdns.org/]].

~$ eblocbroker submit job.yaml~

**** Example yaml file in order to define a job to submit.

~job.yaml~:

#+begin_src yaml
config:
    provider_address: '0x3e6ffc5ede9ee6d782303b2dc5f13afeee277aea'
    source_code:
        cache_type: public
        path: ~/test_eblocbroker/source_code
        storage_hours: 0
        storage_id: ipfs
    data:
        data1:
            cache_type: public
            path: ~/test_eblocbroker/dataset_zip/small/KZ2-tsukuba
            storage_hours: 1
            storage_id: ipfs
        data2:
            cache_type: public
            path: ~/test_eblocbroker/test_data/base/data/data1
            storage_hours: 0
            storage_id: ipfs
        data3:
            hash: f13d75bc60898f0823566347e380a34b
    data_transfer_out: 1
    jobs:
        job1:
            cores: 1
            run_time: 1
#+end_src

- ~path~ should represented as full path of the corresponding folder.
- ~cache_type~ should be variable from [ ~public~, ~private~ ]
- ~storaage_id~ should be variable from [ ~ipfs~, ~ipfs_gpg~, ~none~, ~eudat~, ~gdrive~ ]

-----------------------------------

** Provider

Each provider should run ~eblocbroker driver~ for start running the Python script.

*** Screenshot of provider GUI:

[[file:/docs/gui1.png]]

** Acknowledgement

This work is supported by the Turkish Directorate of Strategy and Budget under the TAM Project
number 2007K12-873.

Developed by Alper Alimoglu and Can Ozturan from Bogazici University, Istanbul.
Contact [[mailto:alper.alimoglu@boun.edu.tr][alper.alimoglu@boun.edu.tr]], [[mailto:ozturaca@boun.edu.tr][ozturaca@boun.edu.tr]] if necessary.
