                                    *outline*
* TASKS
** TODO log ~dataTransferIn~ in the contract
- self.eBlocBroker.decode_input(input)
- testte dataTransferIn hep [0, 0, 0, 0] olarak hesaplanmis?
** TODO patch bdrop and google-drive
** TODO verify downloaded data
** TODO convert ~ipfsID~ into ~ipfsAddress~ in the ~eBlocBrokerInterface.sol~
** TODO Test updated code in 2 machines with your test cast submitting job.
** TODO IPFS inside docker should be swarm connect from outside
** TODO Do demo video do from https://asciinema.org/a/480875 , you can copy string from the video
** TODO check ? dataPricesSetBlockNum > 0 is true at checkRegisteredData() for registered data usage
** TODO check ? in smart-contract in ~internal~ calls is if memory variable updated does it updated as well on where it called from
** TODO token
– https://docs.openzeppelin.com/contracts/2.x/erc20
– https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20
** TODO get_transaction_receipt console'a ekle
** TODO rootless docker in the compute nodes
https://serverfault.com/a/1078434/395276
** TODO https://www.mturk.com
** TODO apply patched for all the folders
** TODO Later do, when cache time is completed:
   oc.decline_remote_share(int(<share_id>)) to cancel shared folder at
   end_code or after some time later
** TODO /* Sets the job's state (stateCode) which is obtained from Slurm */
Slurm status should be set on the receiveDeposit call not setJobStatus
** TODO DAS2-fs1-2003-1.swf
   Starting from // 5955  9447070
   __ https://www.cse.huji.ac.il/labs/parallel/workload/l_das2/index.html
** TODO oc may have "owncloud.owncloud.HTTPResponseError: HTTP error: 401" error
** TODO Some code should go into utils.py
   Some functıons are public that should carried into ~utils.py~
** TODO for workflow visualization: https://github.com/mermaid-js/mermaid
** TODO remove _balance? could be not needed.
** TODO BUGS
#+begin_src python
Failed to share file: googleapi: Error 403: Rate limit exceeded. User message: "Sorry, you have exceeded your sharing quota.", sharingRateLimitExceeded
#+end_src
** TODO fetch b2drop empty size
** TODO investigate store web3 ebb object and read reread from it using picle
** TODO
+ hide ipfs progress in submitting jobs

+ Failed to get about: Get "https://www.googleapis.com/drive/v3/about?alt=json&fields=maxImportSizes%2CmaxUploadSize%2CstorageQuota%2Cuser": oauth2: cannot fetch token: 400 Bad Request
Response: {
  "error": "invalid_grant",
  "error_description": "Token has been expired or revoked."
}
** TODO Fetch ipfs repo dir from the cfg.yaml for each instance

** TODO =warning: timeout function took too long events since bn=20990633 -- counter=0:00:54 ...   Awaiting transaction in the mempool... \=

timeout error during job submissions: start submitting jobs than stop docker instance and make it
work in that condition.
** TODO errors during test:

- Exception: b2drop download error

#+begin_src python
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:449 in _make_request      │
│                                                                                                  │
│    446 │   │   │   │   │   # Remove the TypeError from the exception chain in                    │
│    447 │   │   │   │   │   # Python 3 (including for exceptions like SystemExit).                │
│    448 │   │   │   │   │   # Otherwise it looks like a bug in the code.                          │
│ ❱  449 │   │   │   │   │   six.raise_from(e, None)                                               │
│    450 │   │   except (SocketTimeout, BaseSSLError, SocketError) as e:                           │
│    451 │   │   │   self._raise_timeout(err=e, url=url, timeout_value=read_timeout)               │
│    452 │   │   │   raise                                                                         │
│ in raise_from:3                                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:444 in _make_request      │
│                                                                                                  │
│    441 │   │   │   except TypeError:                                                             │
│    442 │   │   │   │   # Python 3                                                                │
│    443 │   │   │   │   try:                                                                      │
│ ❱  444 │   │   │   │   │   httplib_response = conn.getresponse()                                 │
│    445 │   │   │   │   except BaseException as e:                                                │
│    446 │   │   │   │   │   # Remove the TypeError from the exception chain in                    │
│    447 │   │   │   │   │   # Python 3 (including for exceptions like SystemExit).                │
│                                                                                                  │
│ /usr/lib/python3.8/http/client.py:1348 in getresponse                                            │
│                                                                                                  │
│   1345 │   │                                                                                     │
│   1346 │   │   try:                                                                              │
│   1347 │   │   │   try:                                                                          │
│ ❱ 1348 │   │   │   │   response.begin()                                                          │
│   1349 │   │   │   except ConnectionError:                                                       │
│   1350 │   │   │   │   self.close()                                                              │
│   1351 │   │   │   │   raise                                                                     │
│                                                                                                  │
│ /usr/lib/python3.8/http/client.py:316 in begin                                                   │
│                                                                                                  │
│    313 │   │                                                                                     │
│    314 │   │   # read until we get a non-100 response                                            │
│    315 │   │   while True:                                                                       │
│ ❱  316 │   │   │   version, status, reason = self._read_status()                                 │
│    317 │   │   │   if status != CONTINUE:                                                        │
│    318 │   │   │   │   break                                                                     │
│    319 │   │   │   # skip the header from the 100 response                                       │
│                                                                                                  │
│ /usr/lib/python3.8/http/client.py:277 in _read_status                                            │
│                                                                                                  │
│    274 │   │   self.will_close = _UNKNOWN      # conn will close at end of response              │
│    275 │                                                                                         │
│    276 │   def _read_status(self):                                                               │
│ ❱  277 │   │   line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")                          │
│    278 │   │   if len(line) > _MAXLINE:                                                          │
│    279 │   │   │   raise LineTooLong("status line")                                              │
│    280 │   │   if self.debuglevel > 0:                                                           │
│                                                                                                  │
│ /usr/lib/python3.8/socket.py:669 in readinto                                                     │
│                                                                                                  │
│   666 │   │   │   raise OSError("cannot read from timed out object")                             │
│   667 │   │   while True:                                                                        │
│   668 │   │   │   try:                                                                           │
│ ❱ 669 │   │   │   │   return self._sock.recv_into(b)                                             │
│   670 │   │   │   except timeout:                                                                │
│   671 │   │   │   │   self._timeout_occurred = True                                              │
│   672 │   │   │   │   raise                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
timeout: timed out

During handling of the above exception, another exception occurred:

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/venv/lib/python3.8/site-packages/requests/adapters.py:489 in send                    │
│                                                                                                  │
│   486 │   │                                                                                      │
│   487 │   │   try:                                                                               │
│   488 │   │   │   if not chunked:                                                                │
│ ❱ 489 │   │   │   │   resp = conn.urlopen(                                                       │
│   490 │   │   │   │   │   method=request.method,                                                 │
│   491 │   │   │   │   │   url=url,                                                               │
│   492 │   │   │   │   │   body=request.body,                                                     │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:787 in urlopen            │
│                                                                                                  │
│    784 │   │   │   elif isinstance(e, (SocketError, HTTPException)):                             │
│    785 │   │   │   │   e = ProtocolError("Connection aborted.", e)                               │
│    786 │   │   │                                                                                 │
│ ❱  787 │   │   │   retries = retries.increment(                                                  │
│    788 │   │   │   │   method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]           │
│    789 │   │   │   )                                                                             │
│    790 │   │   │   retries.sleep()                                                               │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/util/retry.py:550 in increment              │
│                                                                                                  │
│   547 │   │   elif error and self._is_read_error(error):                                         │
│   548 │   │   │   # Read retry?                                                                  │
│   549 │   │   │   if read is False or not self._is_method_retryable(method):                     │
│ ❱ 550 │   │   │   │   raise six.reraise(type(error), error, _stacktrace)                         │
│   551 │   │   │   elif read is not None:                                                         │
│   552 │   │   │   │   read -= 1                                                                  │
│   553                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/packages/six.py:770 in reraise              │
│                                                                                                  │
│    767 │   │   │   │   value = tp()                                                              │
│    768 │   │   │   if value.__traceback__ is not tb:                                             │
│    769 │   │   │   │   raise value.with_traceback(tb)                                            │
│ ❱  770 │   │   │   raise value                                                                   │
│    771 │   │   finally:                                                                          │
│    772 │   │   │   value = None                                                                  │
│    773 │   │   │   tb = None                                                                     │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:703 in urlopen            │
│                                                                                                  │
│    700 │   │   │   │   self._prepare_proxy(conn)                                                 │
│    701 │   │   │                                                                                 │
│    702 │   │   │   # Make the request on the httplib connection object.                          │
│ ❱  703 │   │   │   httplib_response = self._make_request(                                        │
│    704 │   │   │   │   conn,                                                                     │
│    705 │   │   │   │   method,                                                                   │
│    706 │   │   │   │   url,                                                                      │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:451 in _make_request      │
│                                                                                                  │
│    448 │   │   │   │   │   # Otherwise it looks like a bug in the code.                          │
│    449 │   │   │   │   │   six.raise_from(e, None)                                               │
│    450 │   │   except (SocketTimeout, BaseSSLError, SocketError) as e:                           │
│ ❱  451 │   │   │   self._raise_timeout(err=e, url=url, timeout_value=read_timeout)               │
│    452 │   │   │   raise                                                                         │
│    453 │   │                                                                                     │
│    454 │   │   # AppEngine doesn't have a version attr.                                          │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/urllib3/connectionpool.py:340 in _raise_timeout     │
│                                                                                                  │
│    337 │   │   """Is the error actually a timeout? Will raise a ReadTimeout or pass"""           │
│    338 │   │                                                                                     │
│    339 │   │   if isinstance(err, SocketTimeout):                                                │
│ ❱  340 │   │   │   raise ReadTimeoutError(                                                       │
│    341 │   │   │   │   self, url, "Read timed out. (read timeout=%s)" % timeout_value            │
│    342 │   │   │   )                                                                             │
│    343                                                                                           │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
ReadTimeoutError: HTTPConnectionPool(host='berg-cmpe-boun.duckdns.org', port=8545): Read timed out. (read timeout=30)

During handling of the above exception, another exception occurred:

╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:403 in _run                                    │
│                                                                                                  │
│   400 │   │   log(f"{br(get_date())} new job has been received through B2DROP: {self.job_key}    │
│       {self.index} ", "cyan")                                                                    │
│   401 │   │   # TODO: refund check                                                               │
│   402 │   │   try:                                                                               │
│ ❱ 403 │   │   │   provider_info = Ebb.get_provider_info(self.logged_job.args["provider"])        │
│   404 │   │   │   self.get_share_token(provider_info["f_id"])                                    │
│   405 │   │   except Exception as e:                                                             │
│   406 │   │   │   print_tb(f"E: could not get the share id. {e}")                                │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/eblocbroker_scripts/get_provider_info.py:21 in get_provider_info │
│                                                                                                  │
│    18 │   if not isinstance(provider, Account):                                                  │
│    19 │   │   provider = self.w3.toChecksumAddress(provider)                                     │
│    20 │                                                                                          │
│ ❱  21 │   if not self.does_provider_exist(provider):                                             │
│    22 │   │   raise QuietTerminate(                                                              │
│    23 │   │   │   f"E: provider={provider} is not registered.\n"                                 │
│    24 │   │   │   f"Please try again with registered Ethereum Address as provider."              │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/eblocbroker_scripts/Contract.py:781 in does_provider_exist       │
│                                                                                                  │
│   778 │   │                                                                                      │
│   779 │   │   if self.eBlocBroker is not None:                                                   │
│   780 │   │   │   if env.IS_BLOXBERG:                                                            │
│ ❱ 781 │   │   │   │   return self.eBlocBroker.doesProviderExist(address)                         │
│   782 │   │   │   else:                                                                          │
│   783 │   │   │   │   return self.eBlocBroker.functions.doesProviderExist(address).call()        │
│   784 │   │   else:                                                                              │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/brownie/network/contract.py:1905 in __call__        │
│                                                                                                  │
│   1902 │   │   """                                                                               │
│   1903 │   │                                                                                     │
│   1904 │   │   if not CONFIG.argv["always_transact"] or block_identifier is not None:            │
│ ❱ 1905 │   │   │   return self.call(*args, block_identifier=block_identifier,                    │
│        override=override)                                                                        │
│   1906 │   │                                                                                     │
│   1907 │   │   args, tx = _get_tx(self._owner, args)                                             │
│   1908 │   │   tx.update({"gas_price": 0, "from": self._owner or accounts[0]})                   │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/brownie/network/contract.py:1694 in call            │
│                                                                                                  │
│   1691 │   │   tx.update({"to": self._address, "data": self.encode_input(*args)})                │
│   1692 │   │                                                                                     │
│   1693 │   │   try:                                                                              │
│ ❱ 1694 │   │   │   data = web3.eth.call({k: v for k, v in tx.items() if v}, block_identifier,    │
│        override)                                                                                 │
│   1695 │   │   except ValueError as e:                                                           │
│   1696 │   │   │   raise VirtualMachineError(e) from None                                        │
│   1697                                                                                           │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/module.py:57 in caller                         │
│                                                                                                  │
│   54 │   │   except _UseExistingFilter as err:                                                   │
│   55 │   │   │   return LogFilter(eth_module=module, filter_id=err.filter_id)                    │
│   56 │   │   result_formatters, error_formatters, null_result_formatters =                       │
│      response_formatters                                                                         │
│ ❱ 57 │   │   result = w3.manager.request_blocking(method_str,                                    │
│   58 │   │   │   │   │   │   │   │   │   │   │    params,                                        │
│   59 │   │   │   │   │   │   │   │   │   │   │    error_formatters,                              │
│   60 │   │   │   │   │   │   │   │   │   │   │    null_result_formatters)                        │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/manager.py:197 in request_blocking             │
│                                                                                                  │
│   194 │   │   """                                                                                │
│   195 │   │   Make a synchronous request using the provider                                      │
│   196 │   │   """                                                                                │
│ ❱ 197 │   │   response = self._make_request(method, params)                                      │
│   198 │   │   return self.formatted_response(response,                                           │
│   199 │   │   │   │   │   │   │   │   │      params,                                             │
│   200 │   │   │   │   │   │   │   │   │      error_formatters,                                   │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/manager.py:150 in _make_request                │
│                                                                                                  │
│   147 │   │   │   self.web3,                                                                     │
│   148 │   │   │   self.middleware_onion)                                                         │
│   149 │   │   self.logger.debug("Making request. Method: %s", method)                            │
│ ❱ 150 │   │   return request_func(method, params)                                                │
│   151 │                                                                                          │
│   152 │   async def _coro_make_request(                                                          │
│   153 │   │   self, method: Union[RPCEndpoint, Callable[..., RPCEndpoint]], params: Any          │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/brownie/network/middlewares/caching.py:229 in       │
│ process_request                                                                                  │
│                                                                                                  │
│   226 │   │                                                                                      │
│   227 │   │   # cached value is unavailable, make a request and cache the result                 │
│   228 │   │   with self.lock:                                                                    │
│ ❱ 229 │   │   │   response = make_request(method, params)                                        │
│   230 │   │   │   self.block_cache.setdefault(self.last_block, {}).setdefault(method, {})        │
│   231 │   │   │   self.block_cache[self.last_block][method][param_str] = response                │
│   232                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/gas_price_strategy.py:90 in         │
│ middleware                                                                                       │
│                                                                                                  │
│    87 │   │   │   │   transaction, latest_block, generated_gas_price                             │
│    88 │   │   │   )                                                                              │
│    89 │   │   │   return make_request(method, (transaction,))                                    │
│ ❱  90 │   │   return make_request(method, params)                                                │
│    91 │                                                                                          │
│    92 │   return middleware                                                                      │
│    93                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/attrdict.py:33 in middleware        │
│                                                                                                  │
│   30 │   Converts any result which is a dictionary into an a                                     │
│   31 │   """                                                                                     │
│   32 │   def middleware(method: RPCEndpoint, params: Any) -> RPCResponse:                        │
│ ❱ 33 │   │   response = make_request(method, params)                                             │
│   34 │   │                                                                                       │
│   35 │   │   if 'result' in response:                                                            │
│   36 │   │   │   result = response['result']                                                     │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:87 in middleware      │
│                                                                                                  │
│    84 │   │   def middleware(method: RPCEndpoint, params: Any) -> RPCResponse:                   │
│    85 │   │   │   formatters = merge(                                                            │
│    86 │   │   │   │   FORMATTER_DEFAULTS,                                                        │
│ ❱  87 │   │   │   │   web3_formatters_builder(w3, method),                                       │
│    88 │   │   │   )                                                                              │
│    89 │   │   │   request_formatters = formatters.pop('request_formatters')                      │
│    90                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/validation.py:140 in                │
│ build_method_validators                                                                          │
│                                                                                                  │
│   137 def build_method_validators(w3: "Web3", method: RPCEndpoint) -> FormattersDict:            │
│   138 │   request_formatters = {}                                                                │
│   139 │   if RPCEndpoint(method) in METHODS_TO_VALIDATE:                                         │
│ ❱ 140 │   │   w3_chain_id = w3.eth.chain_id                                                      │
│   141 │   │   for method in METHODS_TO_VALIDATE:                                                 │
│   142 │   │   │   request_formatters[method] = _chain_id_validator(w3_chain_id)                  │
│   143                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/eth.py:632 in chain_id                         │
│                                                                                                  │
│    629 │                                                                                         │
│    630 │   @property                                                                             │
│    631 │   def chain_id(self) -> int:                                                            │
│ ❱  632 │   │   return self._chain_id()                                                           │
│    633 │                                                                                         │
│    634 │   @property                                                                             │
│    635 │   def chainId(self) -> int:                                                             │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/module.py:57 in caller                         │
│                                                                                                  │
│   54 │   │   except _UseExistingFilter as err:                                                   │
│   55 │   │   │   return LogFilter(eth_module=module, filter_id=err.filter_id)                    │
│   56 │   │   result_formatters, error_formatters, null_result_formatters =                       │
│      response_formatters                                                                         │
│ ❱ 57 │   │   result = w3.manager.request_blocking(method_str,                                    │
│   58 │   │   │   │   │   │   │   │   │   │   │    params,                                        │
│   59 │   │   │   │   │   │   │   │   │   │   │    error_formatters,                              │
│   60 │   │   │   │   │   │   │   │   │   │   │    null_result_formatters)                        │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/manager.py:197 in request_blocking             │
│                                                                                                  │
│   194 │   │   """                                                                                │
│   195 │   │   Make a synchronous request using the provider                                      │
│   196 │   │   """                                                                                │
│ ❱ 197 │   │   response = self._make_request(method, params)                                      │
│   198 │   │   return self.formatted_response(response,                                           │
│   199 │   │   │   │   │   │   │   │   │      params,                                             │
│   200 │   │   │   │   │   │   │   │   │      error_formatters,                                   │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/manager.py:150 in _make_request                │
│                                                                                                  │
│   147 │   │   │   self.web3,                                                                     │
│   148 │   │   │   self.middleware_onion)                                                         │
│   149 │   │   self.logger.debug("Making request. Method: %s", method)                            │
│ ❱ 150 │   │   return request_func(method, params)                                                │
│   151 │                                                                                          │
│   152 │   async def _coro_make_request(                                                          │
│   153 │   │   self, method: Union[RPCEndpoint, Callable[..., RPCEndpoint]], params: Any          │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/brownie/network/middlewares/caching.py:202 in       │
│ process_request                                                                                  │
│                                                                                                  │
│   199 │   │   │   "eth_getTransactionReceipt",                                                   │
│   200 │   │   │   "eth_chainId",                                                                 │
│   201 │   │   ):                                                                                 │
│ ❱ 202 │   │   │   return make_request(method, params)                                            │
│   203 │   │                                                                                      │
│   204 │   │   # try to return a cached value                                                     │
│   205 │   │   param_str = json.dumps(params, separators=(",", ""), default=str)                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/gas_price_strategy.py:90 in         │
│ middleware                                                                                       │
│                                                                                                  │
│    87 │   │   │   │   transaction, latest_block, generated_gas_price                             │
│    88 │   │   │   )                                                                              │
│    89 │   │   │   return make_request(method, (transaction,))                                    │
│ ❱  90 │   │   return make_request(method, params)                                                │
│    91 │                                                                                          │
│    92 │   return middleware                                                                      │
│    93                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/attrdict.py:33 in middleware        │
│                                                                                                  │
│   30 │   Converts any result which is a dictionary into an a                                     │
│   31 │   """                                                                                     │
│   32 │   def middleware(method: RPCEndpoint, params: Any) -> RPCResponse:                        │
│ ❱ 33 │   │   response = make_request(method, params)                                             │
│   34 │   │                                                                                       │
│   35 │   │   if 'result' in response:                                                            │
│   36 │   │   │   result = response['result']                                                     │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/formatting.py:94 in middleware      │
│                                                                                                  │
│    91 │   │   │   if method in request_formatters:                                               │
│    92 │   │   │   │   formatter = request_formatters[method]                                     │
│    93 │   │   │   │   params = formatter(params)                                                 │
│ ❱  94 │   │   │   response = make_request(method, params)                                        │
│    95 │   │   │                                                                                  │
│    96 │   │   │   return _apply_response_formatters(method=method, response=response,            │
│       **formatters)                                                                              │
│    97 │   │   return middleware                                                                  │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/buffered_gas_estimate.py:40 in      │
│ middleware                                                                                       │
│                                                                                                  │
│   37 │   │   │   │   │   hex(get_buffered_gas_estimate(web3, transaction)),                      │
│   38 │   │   │   │   )                                                                           │
│   39 │   │   │   │   return make_request(method, [transaction])                                  │
│ ❱ 40 │   │   return make_request(method, params)                                                 │
│   41 │   return middleware                                                                       │
│   42                                                                                             │
│   43                                                                                             │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/brownie/network/middlewares/catch_tx_revert.py:24   │
│ in process_request                                                                               │
│                                                                                                  │
│   21 │                                                                                           │
│   22 │   def process_request(self, make_request: Callable, method: str, params: List) ->         │
│      Dict:                                                                                       │
│   23 │   │   """Raise a ValueError when RPC.eth_call or RPC.eth_estimateGas errors."""           │
│ ❱ 24 │   │   result = make_request(method, params)                                               │
│   25 │   │   if method in ("eth_call", "eth_estimateGas"):                                       │
│   26 │   │   │   if "error" in result:                                                           │
│   27 │   │   │   │   raise ValueError(result["error"])                                           │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/middleware/exception_retry_request.py:114 in   │
│ middleware                                                                                       │
│                                                                                                  │
│   111 │   │   │   │   │   │   raise                                                              │
│   112 │   │   │   return None                                                                    │
│   113 │   │   else:                                                                              │
│ ❱ 114 │   │   │   return make_request(method, params)                                            │
│   115 │   return middleware                                                                      │
│   116                                                                                            │
│   117                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/providers/rpc.py:88 in make_request            │
│                                                                                                  │
│   85 │   │   self.logger.debug("Making request HTTP. URI: %s, Method: %s",                       │
│   86 │   │   │   │   │   │     self.endpoint_uri, method)                                        │
│   87 │   │   request_data = self.encode_rpc_request(method, params)                              │
│ ❱ 88 │   │   raw_response = make_post_request(                                                   │
│   89 │   │   │   self.endpoint_uri,                                                              │
│   90 │   │   │   request_data,                                                                   │
│   91 │   │   │   **self.get_request_kwargs()                                                     │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/web3/_utils/request.py:112 in make_post_request     │
│                                                                                                  │
│   109 │   kwargs.setdefault("timeout", DEFAULT_TIMEOUT)                                          │
│   110 │   session = _get_session(endpoint_uri)                                                   │
│   111 │   # https://github.com/python/mypy/issues/2582                                           │
│ ❱ 112 │   response = session.post(endpoint_uri, data=data, *args, **kwargs)  # type: ignore      │
│   113 │   response.raise_for_status()                                                            │
│   114 │                                                                                          │
│   115 │   return response.content                                                                │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/requests/sessions.py:635 in post                    │
│                                                                                                  │
│   632 │   │   :rtype: requests.Response                                                          │
│   633 │   │   """                                                                                │
│   634 │   │                                                                                      │
│ ❱ 635 │   │   return self.request("POST", url, data=data, json=json, **kwargs)                   │
│   636 │                                                                                          │
│   637 │   def put(self, url, data=None, **kwargs):                                               │
│   638 │   │   r"""Sends a PUT request. Returns :class:`Response` object.                         │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/requests/sessions.py:587 in request                 │
│                                                                                                  │
│   584 │   │   │   "allow_redirects": allow_redirects,                                            │
│   585 │   │   }                                                                                  │
│   586 │   │   send_kwargs.update(settings)                                                       │
│ ❱ 587 │   │   resp = self.send(prep, **send_kwargs)                                              │
│   588 │   │                                                                                      │
│   589 │   │   return resp                                                                        │
│   590                                                                                            │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/requests/sessions.py:701 in send                    │
│                                                                                                  │
│   698 │   │   start = preferred_clock()                                                          │
│   699 │   │                                                                                      │
│   700 │   │   # Send the request                                                                 │
│ ❱ 701 │   │   r = adapter.send(request, **kwargs)                                                │
│   702 │   │                                                                                      │
│   703 │   │   # Total elapsed time of the request (approximately)                                │
│   704 │   │   elapsed = preferred_clock() - start                                                │
│                                                                                                  │
│ /home/alper/venv/lib/python3.8/site-packages/requests/adapters.py:578 in send                    │
│                                                                                                  │
│   575 │   │   │   │   # This branch is for urllib3 versions earlier than v1.22                   │
│   576 │   │   │   │   raise SSLError(e, request=request)                                         │
│   577 │   │   │   elif isinstance(e, ReadTimeoutError):                                          │
│ ❱ 578 │   │   │   │   raise ReadTimeout(e, request=request)                                      │
│   579 │   │   │   elif isinstance(e, _InvalidHeader):                                            │
│   580 │   │   │   │   raise InvalidHeader(e, request=request)                                    │
│   581 │   │   │   else:                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
ReadTimeout: HTTPConnectionPool(host='berg-cmpe-boun.duckdns.org', port=8545): Read timed out. (read timeout=30)
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:177 in _download_folder                        │
│                                                                                                  │
│   174 │   │   │   │   else:                                                                      │
│   175 │   │   │   │   │   log(f"==> Trying [blue]wget[/blue] approach, attempt={attempt}...")    │
│   176 │   │   │   │                                                                              │
│ ❱ 177 │   │   │   │   token = self.share_id[share_key]["share_token"]                            │
│   178 │   │   │   │   if token:                                                                  │
│   179 │   │   │   │   │   download_fn = f"{cached_tar_fn.replace('.tar.gz',                      │
│       '')}_{self.requester_id}.download"                                                         │
│   180 │   │   │   │   │   cmd = [                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: '53c875e5e4bf7ad978b76d004cde4498_f556b8f5b87759f9'

==> allocated_cores=0 | idle_cores=4 | other_cores=0 | total_cores=4
[  Mon 06/26 17:45:04 PM  ] waiting job events since bn=21004269 -- counter=0:00:24 ... ╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:177 in _download_folder                        │
│                                                                                                  │
│   174 │   │   │   │   else:                                                                      │
│   175 │   │   │   │   │   log(f"==> Trying [blue]wget[/blue] approach, attempt={attempt}...")    │
│   176 │   │   │   │                                                                              │
│ ❱ 177 │   │   │   │   token = self.share_id[share_key]["share_token"]                            │
│   178 │   │   │   │   if token:                                                                  │
│   179 │   │   │   │   │   download_fn = f"{cached_tar_fn.replace('.tar.gz',                      │
│       '')}_{self.requester_id}.download"                                                         │
│   180 │   │   │   │   │   cmd = [                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: '53c875e5e4bf7ad978b76d004cde4498_f556b8f5b87759f9'
[  Mon 06/26 17:45:34 PM  ] waiting job events since bn=21004269 -- counter=0:00:54 ... ╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:177 in _download_folder                        │
│                                                                                                  │
│   174 │   │   │   │   else:                                                                      │
│   175 │   │   │   │   │   log(f"==> Trying [blue]wget[/blue] approach, attempt={attempt}...")    │
│   176 │   │   │   │                                                                              │
│ ❱ 177 │   │   │   │   token = self.share_id[share_key]["share_token"]                            │
│   178 │   │   │   │   if token:                                                                  │
│   179 │   │   │   │   │   download_fn = f"{cached_tar_fn.replace('.tar.gz',                      │
│       '')}_{self.requester_id}.download"                                                         │
│   180 │   │   │   │   │   cmd = [                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: '53c875e5e4bf7ad978b76d004cde4498_f556b8f5b87759f9'
[  Mon 06/26 17:46:05 PM  ] waiting job events since bn=21004269 -- counter=0:01:24 ... ╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:177 in _download_folder                        │
│                                                                                                  │
│   174 │   │   │   │   else:                                                                      │
│   175 │   │   │   │   │   log(f"==> Trying [blue]wget[/blue] approach, attempt={attempt}...")    │
│   176 │   │   │   │                                                                              │
│ ❱ 177 │   │   │   │   token = self.share_id[share_key]["share_token"]                            │
│   178 │   │   │   │   if token:                                                                  │
│   179 │   │   │   │   │   download_fn = f"{cached_tar_fn.replace('.tar.gz',                      │
│       '')}_{self.requester_id}.download"                                                         │
│   180 │   │   │   │   │   cmd = [                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: '53c875e5e4bf7ad978b76d004cde4498_f556b8f5b87759f9'
[  Mon 06/26 17:46:35 PM  ] waiting job events since bn=21004269 -- counter=0:01:54 ... ╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:177 in _download_folder                        │
│                                                                                                  │
│   174 │   │   │   │   else:                                                                      │
│   175 │   │   │   │   │   log(f"==> Trying [blue]wget[/blue] approach, attempt={attempt}...")    │
│   176 │   │   │   │                                                                              │
│ ❱ 177 │   │   │   │   token = self.share_id[share_key]["share_token"]                            │
│   178 │   │   │   │   if token:                                                                  │
│   179 │   │   │   │   │   download_fn = f"{cached_tar_fn.replace('.tar.gz',                      │
│       '')}_{self.requester_id}.download"                                                         │
│   180 │   │   │   │   │   cmd = [                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
KeyError: '53c875e5e4bf7ad978b76d004cde4498_f556b8f5b87759f9'
[  Mon 06/26 17:47:05 PM  ] waiting job events since bn=21004269 -- counter=0:02:24 ... ╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:115 in cache                                   │
│                                                                                                  │
│   112 │   │   │   else:                                                                          │
│   113 │   │   │   │   self.folder_type_dict[folder_name] = "tar.gz"                              │
│   114 │   │   │   │   try:                                                                       │
│ ❱ 115 │   │   │   │   │   self.download_folder(cache_folder, folder_name)                        │
│   116 │   │   │   │   except Exception as e:                                                     │
│   117 │   │   │   │   │   print_tb(e)                                                            │
│   118 │   │   │   │   │   self.full_refund()                                                     │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:221 in download_folder                         │
│                                                                                                  │
│   218 │                                                                                          │
│   219 │   def download_folder(self, cache_folder, folder_name):                                  │
│   220 │   │   """Wrap download folder function."""                                               │
│ ❱ 221 │   │   self._download_folder(cache_folder, folder_name)                                   │
│   222 │   │   self.check_downloaded_folder_hash(cache_folder / f"{folder_name}.tar.gz",          │
│       folder_name)                                                                               │
│   223 │                                                                                          │
│   224 │   def accept_given_shares(self) -> None:                                                 │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/drivers/b2drop.py:217 in _download_folder                        │
│                                                                                                  │
│   214 │   │   │   │   │   log(f"E: Something is wrong, oc could not retrieve the file            │
│       [attempt:{attempt}]")                                                                      │
│   215 │   │   │   │   """                                                                        │
│   216 │   │                                                                                      │
│ ❱ 217 │   │   raise Exception("b2drop download error")                                           │
│   218 │                                                                                          │
│   219 │   def download_folder(self, cache_folder, folder_name):                                  │
│   220 │   │   """Wrap download folder function."""                                               │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
Exception: b2drop download error

#+end_src

- gdrive: Exception: Requested size to download the source-code and data files is greater than the given amount
#+begin_src python
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /home/alper/ebloc-broker/broker/drivers/gdrive.py:317 in run                                     │
│                                                                                                  │
│   314 │   │   try:                                                                               │
│   315 │   │   │   if os.path.isdir(self.results_folder):                                         │
│   316 │   │   │   │   # attempt to download the source code                                      │
│ ❱ 317 │   │   │   │   target = self.get_data(key=self.job_key, _id=0, is_job_key=True)           │
│   318 │   │   │                                                                                  │
│   319 │   │   │   if not os.path.isdir(f"{target}/.git"):                                        │
│   320 │   │   │   │   # log(f"warning: .git folder does not exist within {target}")              │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/drivers/gdrive.py:217 in get_data                                │
│                                                                                                  │
│   214 │   │   │   raise e                                                                        │
│   215 │   │                                                                                      │
│   216 │   │   if is_job_key:                                                                     │
│ ❱ 217 │   │   │   gdrive_info = self.pre_data_check(key)                                         │
│   218 │   │   │   name = gdrive.get_file_info(gdrive_info, "Name")                               │
│   219 │   │   │   mime_type = gdrive.get_file_info(gdrive_info, "Mime")                          │
│   220                                                                                            │
│                                                                                                  │
│ /home/alper/ebloc-broker/broker/drivers/gdrive.py:197 in pre_data_check                          │
│                                                                                                  │
│   194 │   def pre_data_check(self, key):                                                         │
│   195 │   │   if self.data_transfer_in_to_download > self.data_transfer_in_requested:            │
│   196 │   │   │   # TODO: full refund                                                            │
│ ❱ 197 │   │   │   raise Exception(                                                               │
│   198 │   │   │   │   "Requested size to download the source-code and data files is greater      │
│       than the given amount"                                                                     │
│   199 │   │   │   )                                                                              │
│   200                                                                                            │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
Exception: Requested size to download the source-code and data files is greater than the given amount
#+end_src

data_transfer_in=232 MB -> rounded=232 MB da sorun var 0 olunca calisiyor gdirve da ama

#+begin_src python
==> job_info={
    │   'provider': '0x4934a70Ba8c1C3aCFA72E809118BDd9048563A24',
    │   'job_owner': '0xe01eda38f7b5146463872f0c769ac14885dbf518',
    │   'job_key': '916f36db95f06fa1407a285998342cdc',
    │   'index': 0,
    │   'availableCore': 4,
    │   'cacheType': [0, 0, 0, 0],
    │   'stateCode': 0,
    │   'start_timestamp': 0,
    │   'submitJob_received_job_price': 6042500,
    │   'data_transfer_in_input': [10, 621, 0, 0],
    │   'data_transfer_out_input': 5,
    │   'data_transfer_in': 10,
    │   'data_transfer_out': 5,
    │   'commitment_block_duration': 600,
    │   'price_core_min': 100000,
    │   'price_data_transfer': 100,
    │   'price_storage': 100,
    │   'price_cache': 100,
    │   'received_bn': 21007373,
    │   'core': [1],
    │   'received': 6166700,
    │   'run_time': [60],
    │   'cloudStorageID': [3, 3, 2, 2],
    │   'result_ipfs_hash': '',
    │   'code_hashes': [
        │   │   b'916f36db95f06fa1407a285998342cdc',
        │   │   b'7d3e4f3aff0730fcf6e24ce0c3e42ede',
        │   │   b'9d5d892a63b5758090258300a59eb389',
        │   │   b'dd0fbccccf7a198681ab838c67b68fbf'
        │   ],
    │   'storage_duration': [],
    │   'submitJob_sum_storage_payment_cent': 0.0,
    │   'submitJob_block_hash': '0xd2379c71e379bced8204d1e4a9936f3f4bf1002c0cea8eed017f0b16609f9cee',
    │   'submitJob_tx_hash': '0x76c2cc26bd710799a2b2d815876358d66255cf398cc72f5df53994701be2e564',
    │   'data_prices_set_block_numbers': [0, 0, 0, 0],
    │   'submitJob_gas_used': 277276,
    │   'submitJob_LogDataStorageRequest': [
        │   │   {
            │   │   │   'provider': '0x4934a70Ba8c1C3aCFA72E809118BDd9048563A24',
            │   │   │   'owner': '0xE01eDA38f7b5146463872F0C769AC14885DBF518',
            │   │   │   'requestedHash': b'916f36db95f06fa1407a285998342cdc',
            │   │   │   'paid': 0
            │   │   }
        │   ],
    │   '_LogDataStorageRequest': [0],
    │   'processPayment_bn': 0,
    │   'processPayment_gas_used': 0,
    │   'received_block': [],
    │   'is_cached': {
        │   │   '916f36db95f06fa1407a285998342cdc': False,
        │   │   '7d3e4f3aff0730fcf6e24ce0c3e42ede': False,
        │   │   '9d5d892a63b5758090258300a59eb389': False,
        │   │   'dd0fbccccf7a198681ab838c67b68fbf': False
        │   },


~/ebloc-broker/broker/eblocbroker_scripts/process_payment.py \
          916f36db95f06fa1407a285998342cdc 0 0 2 "" '[3, 3, 2, 2]' 1687811273 232 0 '[1]' '[60]'
#+end_src
** TODO Submit N-nodes workflow as whole(without partitioning) to a provider and make it run.
